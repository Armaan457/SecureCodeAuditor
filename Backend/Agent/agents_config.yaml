common:
  model_name: "gemini-2.0-flash"
  output_format_instruction: "Provide the output STRICTLY in the specified structure ONLY, no markdown or other text needed. Don't repeat a vulnerability already found."
  response_structure:
    no_findings_response: '{"findings": [{"vulnerability_type": null, "code_snippet": null, "recommendation": null}]}'
    schema: |
      {
        "findings": [
          {
            "vulnerability_type": "string - Type of vulnerability found",
            "code_snippet": "string - Code snippet showing the vulnerability", 
            "recommendation": "string - Recommended fix for the vulnerability"
          }
        ]
      }

agents:
  xml_api_agent:
    api_key_env: "GEMINI_API_KEY"
    task_description: "Inspect the code for vulnerabilities in XML processing and API configurations. Look for XML External Entity (XXE) attacks, insecure API usage and keys, and Security Misconfigurations."
    example_vulnerabilities: |
      {
        "findings": [
          {
            "vulnerability_type": "XML External Entity (XXE)",
            "code_snippet": "etree.parse(user_input)",
            "recommendation": "Disable external entity resolution when processing XML files."
          },
          {
            "vulnerability_type": "API Misuse",
            "code_snippet": "response = requests.post(api_url, data=user_data)",
            "recommendation": "Use secure authentication and validate API responses."
          }
        ]
      }

  access_control_agent:
    api_key_env: "GEMINI_API_KEY_2"
    task_description: "Analyze the code for access control vulnerabilities. Look for Insecure Direct Object References (IDOR), Host Header Injection, and Subdomain Takeover risks. Identify instances where access control mechanisms are improperly implemented."
    example_vulnerabilities: |
      {
        "findings": [
          {
            "vulnerability_type": "Insecure Direct Object Reference (IDOR)",
            "code_snippet": "GET /user/123",
            "recommendation": "Implement access controls to verify the requester is authorized to access the resource."
          },
          {
            "vulnerability_type": "Host Header Injection",
            "code_snippet": "url = request.headers['Host'] + '/login'",
            "recommendation": "Validate and sanitize the Host header to prevent injection attacks."
          }
        ]
      }

  file_access_agent:
    api_key_env: "GEMINI_API_KEY_3"
    focus_areas:
      - "Path Traversal"
      - "Local File Inclusion (LFI)"
      - "Remote File Inclusion (RFI)"
    task_description: "Scan the code for vulnerabilities related to file access. Detect instances of Path Traversal, Local File Inclusion (LFI), and Remote File Inclusion (RFI). Focus on functions that handle file paths or include external files."
    example_vulnerabilities: |
      {
        "findings": [
          {
            "vulnerability_type": "Path Traversal",
            "code_snippet": "open('../../etc/passwd', 'r')",
            "recommendation": "Validate file paths and restrict access to specific directories."
          },
          {
            "vulnerability_type": "Local File Inclusion (LFI)",
            "code_snippet": "exec(open(user_input).read())",
            "recommendation": "Ensure user input is validated and does not reference sensitive files."
          }
        ]
      }

  client_side_agent:
    api_key_env: "GEMINI_API_KEY_4"
    task_description: "Examine the code for client-side vulnerabilities. Specifically, identify potential Cross-Site Scripting (XSS), Clickjacking, and Content Spoofing issues. Look for improper handling of user-generated content or unsafe rendering practices."
    example_vulnerabilities: |
      {
        "findings": [
          {
            "vulnerability_type": "Cross-Site Scripting (XSS)",
            "code_snippet": "{{ user_input }}",
            "recommendation": "Escape or sanitize user-generated content before rendering."
          },
          {
            "vulnerability_type": "Clickjacking",
            "code_snippet": "response.headers['X-Frame-Options'] = 'ALLOW'",
            "recommendation": "Set 'X-Frame-Options' to 'DENY' or 'SAMEORIGIN' to prevent clickjacking."
          }
        ]
      }

  input_validation_agent:
    api_key_env: "GEMINI_API_KEY_5"
    focus_areas:
      - "SQL Injection"
      - "Command Injection"
      - "Code Injection"
    task_description: "Analyze the provided code for vulnerabilities related to user input handling. Specifically, detect cases where user input is directly passed into SQL queries, system commands, or dynamic code execution without validation or sanitization. Focus on identifying potential SQL Injection, Command Injection, and Code Injection vulnerabilities."
    example_vulnerabilities: |
      {
        "findings": [
          {
            "vulnerability_type": "SQL Injection",
            "code_snippet": "cursor.execute('SELECT * FROM users WHERE id = ' + user_input)",
            "recommendation": "Use parameterized queries to prevent SQL injection."
          },
          {
            "vulnerability_type": "Command Injection",
            "code_snippet": "os.system('ping ' + user_input)",
            "recommendation": "Validate and sanitize user input before passing it to system commands."
          }
        ]
      }
